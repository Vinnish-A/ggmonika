##### config #####

library(ggsci)
library(Seurat)
library(tidyverse)
library(clusterProfiler)

enrichment = function(dataset) {
  
  degs = FindAllMarkers(dataset, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
  gid = bitr(unique(degs$gene), 'SYMBOL', 'ENTREZID', OrgDb = 'org.Hs.eg.db')
  
  degs_filtered = degs |> 
    group_by(cluster) |>
    filter(p_val_adj < 0.001) |>
    ungroup()
  degs_filtered = full_join(degs_filtered, gid, by = c("gene" = "SYMBOL"))
  
  resultGO = compareCluster(ENTREZID ~ cluster, data = degs_filtered, fun = 'enrichGO', OrgDb = 'org.Hs.eg.db')
  resultKEGG = compareCluster(ENTREZID ~ cluster, data = degs_filtered, fun = 'enrichKEGG')
  return(list(enrichGO = resultGO, enrichKEGG = resultKEGG, degs = degs))
}

##### Analysis #####

# Readin
epiKUL = readRDS("./data/epiKUL.Rds")
DefaultAssay(epiKUL) = "SCT"

epiKUL = FindVariableFeatures(epiKUL, selection.method = "vst", nfeatures = 3000) 

epiKUL = ScaleData(epiKUL, features = VariableFeatures(epiKUL))
epiKUL = RunPCA(epiKUL, features = VariableFeatures(epiKUL)) 
# ElbowPlot(epiKUL)
epiKUL = FindNeighbors(epiKUL, dims = 1:12)
epiKUL = FindClusters(epiKUL, resolution = 0.1) 
epiKUL = RunUMAP(epiKUL, dims = 1:12)

DimPlot(epiKUL, reduction = "umap") + 
  scale_color_jama()

# UMAP
biology = c(
  "0" = "Cell Adhesion", 
  "1" = "OXPHOS", 
  "2" = "Antibody Reacting", 
  "3" = "OXPHOS & Translation", 
  "4" = "Cell Adhesion & Translation", 
  "5" = "Cellular Stress Response",
  "6" = "Antibody Reacting"
); biology = factor(biology, levels = unique(biology))


umapCoords = epiKUL[["umap"]]@cell.embeddings |> as_tibble(rownames = "ID")
seuratCluster = epiKUL@meta.data |> as_tibble(rownames = "ID") |> select(ID, seurat_clusters)

dataPlotUMAP = inner_join(umapCoords, seuratCluster, "ID") |> 
  mutate(cluster = droplevels(biology[as.character(seurat_clusters)]))
dataPlotUMAPText = dataPlotUMAP |> 
  group_by(cluster) |> 
  summarise(x = quantile(umap_1, sample(c(0.3, 0.8), 1)), y = quantile(umap_2, sample(c(0.2, 0.8), 1)))

colors = c("#4A9D47", "#F19294", "#E45D61", "#96C3D8", "#5F9BBE", "#F5B375", "#67A59B", "#A5D38F")[1:length(levels(dataPlotUMAP$cluster))]

library(grid)
library(ggunchull)
axis = ggh4x::guide_axis_truncated(
  trunc_lower = unit(0, "npc"),
  trunc_upper = unit(4, "cm")
)

plotUMAP = dataPlotUMAP |> 
  ggplot() +
  stat_unchull(aes(umap_1, umap_2, color = cluster, fill = cluster), alpha = 0.2, size = 1, lty = 2, qval = 0.8) +
  geom_point(aes(umap_1, umap_2, color = cluster)) +
  # geom_label(data = dataPlotUMAPText, aes(x, y, label = cluster, color = cluster)) +
  guides(fill = "none", x = axis, y = axis) +
  labs(color = "") +
  scale_color_manual(values = colors) +
  scale_fill_manual(values = colors) +
  scale_x_continuous(breaks = NULL) +
  scale_y_continuous(breaks = NULL) +
  theme(
    aspect.ratio = 1,
    legend.position = "bottom", 
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.title = element_text(hjust = 0.05, face = "italic"), 
    axis.line.x = element_line(arrow = arrow(type = "open", length = unit(0.5, "cm"))),
    axis.line.y = element_line(arrow = arrow(type = "open", length = unit(0.5, "cm")))
  )

ggsave("./result/kulUMAP.pdf", plotUMAP, width = 8, height = 8)
  
# Enrichment
epiKUL@meta.data$cluster = biology[as.character(epiKUL@meta.data$seurat_clusters)] |> droplevels()
Idents(epiKUL) = epiKUL@meta.data$cluster

enrichAndDegsKUL = enrichment(epiKUL)
enrichKUL = enrichAndDegsKUL$enrichGO
degsKUL = enrichAndDegsKUL$degs

enrichAndDegsKUL$enrichGO@compareClusterResult |>
  filter(cluster != "NA") |>
  group_by(cluster) |> 
  slice_max(-p.adjust, n = 10) |> 
  ungroup() |> 
  write_csv("./enrich/KUL_GO.csv")

enrichAndDegsKUL$enrichKEGG@compareClusterResult |>
  filter(cluster != "NA") |>
  group_by(cluster) |> 
  slice_max(-p.adjust, n = 10) |> 
  ungroup() |> 
  write_csv("./enrich/KUL_KEGG.csv")


# degs
num = 15
degsSliced = degsKUL |> 
  distinct(gene, .keep_all = T) |> 
  mutate(Ident = cluster) |> 
  group_by(cluster) |> 
  arrange(p_val_adj) |> 
  slice_max(avg_log2FC, n = num) |> 
  ungroup() |> 
  pull(gene, cluster)

dataPlotlst = list()
for (cellCluster in levels(epiKUL$cluster)) {
  
  markers = FindMarkers(epiKUL, ident.1 = cellCluster, only.pos = F, features = degsSliced)
  markers$cluster = cellCluster
  dataPlotlst[[cellCluster]] = markers |> 
    as_tibble(rownames = "gene")
  
}

# Plot

dataPlot = dataPlotlst |> 
  bind_rows() |> 
  arrange(cluster) |>
  mutate(cluster = factor(cluster)) |>
  select(cluster, avg_log2FC, gene) |>
  pivot_wider(names_from = cluster, values_from = avg_log2FC, values_fill = 0) |> 
  mutate(gene = factor(gene, levels = degsSliced)) |> 
  pivot_longer(-gene, names_to = "cluster", values_to = "avg_log2FC") |> 
  mutate(cluster = factor(cluster, levels = levels(epiKUL$cluster))) |> 
  mutate(avg_log2FC = ifelse(avg_log2FC == min(avg_log2FC), -10.1, avg_log2FC))

dataPlotEnrich = enrichKUL@compareClusterResult |> 
  filter(cluster != "NA") |> 
  group_by(cluster) |> 
  slice_max(-p.adjust, n = 5) |> 
  ungroup() |> 
  mutate(cluster = factor(cluster, levels = rev(levels(Cluster))))

p1 = dataPlot |> 
  ggplot(aes(x = cluster,
             y = reorder(gene, -as.numeric(cluster)),
             fill = avg_log2FC, 
             color = avg_log2FC)) +
  geom_tile() +
  xlab("") +
  ylab("") +
  labs(fill = "", color = "") +
  scale_color_gradient2(low = "#01665e", mid = "white", high = "#8c510a", breaks = c(-10,-5,0,5,10)) +
  scale_fill_gradient2(low = "#01665e", mid = "white", high = "#8c510a", breaks = c(-10,-5,0,5,10)) +
  scale_x_discrete(breaks = NULL) +
  theme_bw() +
  theme(legend.position = "top",
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_rect(color = "black", linewidth = 0.2, fill = NA),
        plot.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
        legend.key.size = unit(0.5, "cm"),
        legend.key.width = unit(0.5, "cm"))

p2 = tibble(x = 0, y = dataPlot$cluster |> unique()) |> 
  ggplot(aes(x = y, y = 1, color = factor(y))) +
  geom_point(size = 6, show.legend = F) +
  scale_color_manual(values = colors) +
  scale_y_continuous(expand = c(0,0)) +
  theme(legend.position = "none",
        panel.spacing = unit(0, "lines"),
        panel.background = element_blank(),
        panel.border = element_blank(),
        plot.background = element_blank(),
        plot.margin = margin(0, 0, 0, 0, "pt"),
        axis.text.x = element_text(angle = 30,
                                   size = 12,
                                   hjust = 1,
                                   vjust = 1,
                                   color = "black"),
        axis.title  = element_blank(),
        axis.ticks = element_blank(),
        panel.grid = element_blank(),
        axis.text.y = element_blank())

p3 = dataPlotEnrich |> 
  ggplot(aes(x = reorder(Description, -log10(p.adjust)),
             y = -log10(p.adjust),
             fill = cluster)) +
  geom_bar(position = position_dodge(),
           stat = "identity",
           show.legend = F) +
  scale_x_discrete(position = "top") +
  scale_y_continuous(expand = c(0,0)) +
  scale_fill_manual(values = rev(colors))+
  facet_wrap(~ cluster, ncol = 1, scales = "free_y") +
  theme_bw() +
  theme(strip.background = element_blank(),
        strip.text = element_blank(),
        axis.title.y = element_blank(),
        panel.spacing = unit(0, "lines"),
        axis.text = element_text(size = 12),
        panel.border = element_rect(colour = "grey50")) +
  ylab("-Log10(Padj)") +
  coord_flip()

library(patchwork)
p = p1 + p3 + p2 + plot_spacer() + plot_layout(widths = c(2, 1), height = c(12, 1))

ggsave("./result/kulCluster.pdf", p, width = 14, height = 14)

# Stage
stageKUL = read_tsv("./data/stageKUL.txt") |> 
  mutate(stage = str_sub(stage, 7) |> factor()) |> 
  rename(`Patient ID` = sample)

inner_join(as_tibble(epiKUL@meta.data, rownames = "ID"), stageKUL, "Patient ID") |> 
  mutate(OXPHOS = ifelse(str_detect(cluster, "OXPHOS"), "OXPHOS", "Not")) |> 
  group_by(stage) |> 
  count(OXPHOS) |> 
  mutate(ratio = n/sum(n))

# Enrichment

GO = clusterProfiler:::get_GO_data("org.Hs.eg.db", "ALL", "ENTREZID")

pathways = GO_terms[c("glycolytic process", "electron transfer activity")]
pathgenes_ei = GO$PATHID2EXTID[pathways]
pathgenes_sb = lapply(pathgenes_ei, \(genes) bitr(unique(genes), 'ENTREZID', 'SYMBOL', OrgDb = 'org.Hs.eg.db')$SYMBOL)

for (i in 1:length(pathgenes_sb)) {
  genesInpath = pathgenes_sb[i]
  id = names(pathgenes_sb)[i]
  
  epiKUL = AddModuleScore(object = epiKUL, features = genesInpath, ctrl = 100, name = id, nbin = 8)
}

msKUL = epiKUL@meta.data |> 
  dplyr::select(cluster, `Glycolytic Process` = `GO:00060961`, `Electron Transfer Activity` = `GO:00090551`) |> 
  pivot_longer(-cluster, names_to = "pathway", values_to = "value") |> 
  ggplot(aes(cluster, value)) +
  geom_jitter(aes(color = cluster), alpha = 0.5) +
  geom_violin(aes(fill = cluster), alpha = 0.5) +
  scale_color_manual(values = colors) +
  scale_fill_manual(values = colors) +
  labs(color = "", fill = "", title = "Module Score in KUL") +
  ylab("Module Score") +
  xlab("") +
  facet_wrap(~ pathway, nrow = 2, scales = "free_y", strip.position = "right") +
  theme_classic() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 12), 
    legend.position = "bottom"
  )

ggsave("./result/KUL_MS.pdf", msKUL, width = 12, height = 6)
